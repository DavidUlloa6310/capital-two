// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id           String     @id @default(cuid())
    first_name   String?
    last_name    String?
    email        String?    @unique
    age          Int?
    last_login   DateTime?
    //Financial information
    credit_score Int?
    location     String?
    job_title    String?
    accounts     Account[]
    sessions     Session[]
    posts        Post[]
    comments     Comment[]
    post_votes   PostVote[]
}

model Post {
    id         String     @id @default(cuid())
    content    String
    author     User?      @relation(fields: [authorId], references: [id])
    authorId   String?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    comments   Comment[]
    post_votes PostVote[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PostVote {
    id        String   @id @default(cuid())
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?
    value     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Define a compound unique constraint on authorId and postId
    @@unique([authorId, postId])
}
