// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Example {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id           Int        @id @default(autoincrement())
    first_name   String?
    last_name    String?
    email        String?    @unique
    age          Int?
    last_login   DateTime?
    //Financial information
    credit_score Int?
    income       Int?
    location     String?
    job_title    String?
    // accounts     Account[]
    // sessions     Session[]
    posts        Post[]
    comments     Comment[]
    post_votes   PostVote[]
}

model Post {
    id         Int        @id @default(autoincrement())
    title      String
    content    String
    author     User?      @relation(fields: [authorId], references: [id])
    authorId   Int?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    comments   Comment[]
    post_votes PostVote[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  Int
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PostVote {
    id        Int      @id @default(autoincrement())
    post      Post?    @relation(fields: [postId], references: [id])
    postId    Int?
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  Int?
    direction Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Define a compound unique constraint on authorId and postId
    @@unique([authorId, postId])
}
